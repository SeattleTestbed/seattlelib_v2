#this unit test checks the functionality of the lock traced object

from repyportability import *
add_dy_support(locals())
dy_import_module_symbols("strace.r2py")


#create a lock
PRINT_LOCK = wrapped_createlock()

#open traced file
fileobjtrace = openfile(tracefile, True)
tracedCall = fileobjtrace.readat(None, 0)
fileobjtrace.close()

#Check apicall to traced call
if("createlock" not in tracedCall):
	print "Trace api call failed to trace correct function, createlock"
if("emulmisc.emulated_lock object"not in tracedCall):
	print "Failed to trace trace correct function as correct object"

PRINT_LOCK.acquire(True)

#open traced file
fileobjtrace = openfile(tracefile, True)
tracedCall = fileobjtrace.readat(None, 0)
fileobjtrace.close()

#Check apicall to traced call
if("lock.acquire" not in tracedCall):
	print "Trace api call failed to trace correct function, lock.acquire"
if("(True,)" not in tracedCall):
	print "Trace api call failed to trace correct function with correct paramaters, lock.acquire(True)"
if("emulmisc.emulated_lock object"not in tracedCall):
	print "Failed to trace trace correct function as correct object"



PRINT_LOCK.release()

#open traced file
fileobjtrace = openfile(tracefile, True)
tracedCall = fileobjtrace.readat(None, 0)
fileobjtrace.close()

#Check apicall to traced call
if("lock.release" not in tracedCall):
	print "Trace api call failed to trace correct function, createlock"
if("emulmisc.emulated_lock object"not in tracedCall):
	print "Failed to trace trace correct function as correct object"