"""
Verify that `math_log` casts its parameters to float before using them.
(Otherwise, division results are truncated and the final result is wrong,
and/or a greater-than comparison is attempted against a complex number.)
"""
#pragma repy restrictions.default dylink.r2py

math = dy_import_module("math.r2py")

# Use these numbers as test cases
testcases = [2, 3, 4, 5, 100, 1000]

# Test for the `X` and `base` parameters first
for t in testcases:
  for u in testcases:
    correct_result = math.math_log(float(t), float(u))
    for tt, uu in [(t,u), (float(t), u), (t, float(u))]:
      this_result = math.math_log(tt, uu)
      if this_result != correct_result:
        log("Incorrect result for math_log(" + str(tt) + ", base=" + str(uu) +
            "): is " + str(this_result) + ", should be", correct_result, "\n")


# Test for `epsilon`.
# No errors here, only loss of precision (as "desired" by a large epsilon)
math.math_log(2, 3, 5)


# A complex epsilon should error out
try:
  math.math_log(2, 3, 5j)
except TypeError:
  pass

