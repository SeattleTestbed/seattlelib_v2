"""
<Purpose>
  this unit test checks the functionality of the file traced object 
  Function Tested:
	openfile(filename, create)
	file.close()
	file.readat(sizelimit, offset)
	file.writeat(data, offset)
"""

#pragma repy restrictions.default dylink.r2py encasementlib.r2py log_between_modules.r2py strace.r2py

#librepy is used for 2 files handles
#one file handle is for the ut (reading)
#the other is for the security module (writing)
#data is passed between security module and unit test 
libfile = dy_import_module("librepy.r2py")

#open file using trace call
fielobj = openfile("testfile.txt", True)

#open traced file
librepyfile = libfile.open("tracer.txt")
tracedcall = librepyfile.readline()
librepyfile.close()

"""
<Expected return example>
1.42788 openfile ('testfile.txt', True) = <Namespace wrapped file: 
<emulfile.emulated_file object at 0x7fa2e91808e8>> 
"""

#Check apicall to traced call
if("openfile ('testfile.txt', True)" not in tracedcall):
	the_original_log_function("Trace api call failed to trace correct \
		function, openfile ('testfile.txt', True)")
	
if("emulfile.emulated_file object"not in tracedcall):
	the_original_log_function("Failed to trace trace correct function \
		as correct object")


#write something using trace call
fielobj.writeat("asdfasdf",0)

#open traced file
librepyfile = libfile.open("tracer.txt")
tracedcall = librepyfile.readline()
librepyfile.close()

"""
<Expected return example>
1.43081 file.writeat <Namespace wrapped file: 
<emulfile.emulated_file object at 0x7fa2e91808e8>> ('asdfasdf', 0) 
"""

#Check apicall to traced call
if("file.writeat" not in tracedcall):
	the_original_log_function("Trace api call failed to trace correct \
		function, writeat")

if("(\'asdfasdf\', 0)" not in tracedcall):
	the_original_log_function("Trace api call failed to trace correct \
		function with correct parameters, fielobj.writeat(\'asdfasdf\',0)")

if("emulfile.emulated_file object"not in tracedcall):
	the_original_log_function("Failed to trace trace correct function \
		as correct object")



#close file using trace call
fielobj.close()

#open traced file
librepyfile = libfile.open("tracer.txt")
tracedcall = librepyfile.readline()
librepyfile.close()

"""
<Expected return example>
1.43271 file.close <Namespace wrapped file: 
emulfile.emulated_file object at 0x7fa2e91808e8>>>> ('asdfasdf', 0) 
"""

#Check apicall to traced call
if("file.close" not in tracedcall):
	the_original_log_function("Trace api call failed to trace \
		correct function, close")

if("emulfile.emulated_file object"not in tracedcall):
	the_original_log_function("Failed to trace trace correct \
		function as correct object")


#open existing file with trace call
fielobj = openfile("testfile.txt", True)

#open traced file
librepyfile = libfile.open("tracer.txt")
tracedcall = librepyfile.readline()
librepyfile.close()

"""
<Expected return example>
1.43453 openfile ('testfile.txt', True) = <Namespace wrapped file: 
<emulfile.emulated_file object at 0x7fa2e9180940>>) 
"""

#Check apicall to traced call
if("openfile" not in tracedcall):
	the_original_log_function("Trace api call failed to trace \
		correct function, openfile")

if("(\'testfile.txt\', True)" not in tracedcall):
	the_original_log_function("Trace api call failed to trace correct \
		function with correct parameters, openfile(\'testfile.txt\', True)")

if("emulfile.emulated_file object"not in tracedcall):
	the_original_log_function("Failed to trace trace correct \
		function as correct object")

#read from file usiung trace call
fielobj.readat(0,4)

#open traced file
librepyfile = libfile.open("tracer.txt")
tracedcall = librepyfile.readline()
librepyfile.close()


"""
<Expected return example>
1.43618 file.readat <Namespace wrapped file: 
<emulfile.emulated_file object at 0x7fa2e9180940>> (0, 4) = 0940>>) 
"""

#Check apicall to traced call
if("file.readat" not in tracedcall):
	the_original_log_function("Trace api call failed to trace \
		correct function, readat")

if("(0, 4)" not in tracedcall):
	the_original_log_function("Trace api call failed to trace correct\
	 function with correct parameters, fileobj.readat (0, 4)")

if("emulfile.emulated_file object"not in tracedcall):
	the_original_log_function("Failed to trace trace correct \
		function as correct object")

#close file using trace call
fielobj.close()

#open traced file
librepyfile = libfile.open("tracer.txt")
tracedcall = librepyfile.readline()
librepyfile.close()

"""
<Expected return example>
1.43795 file.close <Namespace wrapped file: 
<emulfile.emulated_file object at 0x7fa2e9180940>>> (0, 4) = 0940>>)
"""

#Check apicall to traced call
if("file.close" not in tracedcall):
	the_original_log_function("Trace api call failed to \
		trace correct function, close")

if("emulfile.emulated_file object"not in tracedcall):
	the_original_log_function("Failed to trace trace \
		correct function as correct object")


#gets tested in Ut_stattlelib_strace_nonobjapi.r2py
removefile("testfile.txt")