#this unit test checks the functionality of the file traced object 

from repyportability import *
add_dy_support(locals())
dy_import_module_symbols("strace.r2py")


#create a file using the traced call
fielobj = wrapped_openfile("../hi.txt", True)

#open traced file
fileobjtrace = openfile(tracefile, True)
tracedCall = fileobjtrace.readat(None, 0)
fileobjtrace.close()

#Check apicall to traced call
if("openfile" not in tracedCall):
	print "Trace api call failed to trace correct function, openfile"
if("('../hi.txt', True)" not in tracedCall):
	print "Trace api call failed to trace correct function with correct parameters, openfile('../hi.txt', True)"
if("emulfile.emulated_file object"not in tracedCall):
	print "Failed to trace trace correct function as correct object"


#write something using trace call
fielobj.writeat("asdfasdf",0)

#open traced file
fileobjtrace = openfile(tracefile, True)
tracedCall = fileobjtrace.readat(None, 0)
fileobjtrace.close()

#Check apicall to traced call
if("file.writeat" not in tracedCall):
	print "Trace api call failed to trace correct function, writeat"
if("('asdfasdf', 0)" not in tracedCall):
	print "Trace api call failed to trace correct function with correct parameters, fielobj.writeat('asdfasdf',0)"
if("emulfile.emulated_file object"not in tracedCall):
	print "Failed to trace trace correct function as correct object"



#close file using trace call
fielobj.close()

#open traced file
fileobjtrace = openfile(tracefile, True)
tracedCall = fileobjtrace.readat(None, 0)
fileobjtrace.close()

#Check apicall to traced call
if("file.close" not in tracedCall):
	print "Trace api call failed to trace correct function, close"
if("emulfile.emulated_file object"not in tracedCall):
	print "Failed to trace trace correct function as correct object"


#open existing file with trace call
fielobj = wrapped_openfile("../hi.txt", True)

#open traced file
fileobjtrace = openfile(tracefile, True)
tracedCall = fileobjtrace.readat(None, 0)
fileobjtrace.close()

#Check apicall to traced call
if("openfile" not in tracedCall):
	print "Trace api call failed to trace correct function, openfile"
if("('../hi.txt', True)" not in tracedCall):
	print "Trace api call failed to trace correct function with correct parameters, openfile('../hi.txt', True)"
if("emulfile.emulated_file object"not in tracedCall):
	print "Failed to trace trace correct function as correct object"

#read from file usiung trace call
fielobj.readat(0,4)

#open traced file
fileobjtrace = openfile(tracefile, True)
tracedCall = fileobjtrace.readat(None, 0)
fileobjtrace.close()

print fileobjtrace
#Check apicall to traced call
if("file.readat" not in tracedCall):
	print "Trace api call failed to trace correct function, readat"
if("(0, 4)" not in tracedCall):
	print "Trace api call failed to trace correct function with correct parameters, fileobj.readat (0, 4)"
if("emulfile.emulated_file object"not in tracedCall):
	print "Failed to trace trace correct function as correct object"

#close file using trace call
fielobj.close()

#open traced file
fileobjtrace = openfile(tracefile, True)
tracedCall = fileobjtrace.readat(None, 0)
fileobjtrace.close()

#Check apicall to traced call
if("file.close" not in tracedCall):
	print "Trace api call failed to trace correct function, close"
if("emulfile.emulated_file object"not in tracedCall):
	print "Failed to trace trace correct function as correct object"


